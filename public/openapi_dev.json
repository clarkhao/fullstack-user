{
  "openapi": "3.0.1",
  "info": {
    "title": "NextJS API",
    "description": "api of fullstack next.js app",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "development mode url"
    }
  ],
  "components": {
    "responses": {
      "BadRequest": {
        "description": "400 Client side errors",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SimpleMessage"
            }
          }
        }
      },
      "FailedAuth": {
        "description": "401 Authentication information is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SimpleMessage"
            }
          }
        }
      },
      "InvalidPWD": {
        "description": "403 Invalid Password",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SimpleMessage"
            }
          }
        }
      },
      "NotFound": {
        "description": "404 The user name or email not found or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SimpleMessage"
            }
          }
        }
      },
      "ConflictId": {
        "description": "409 Already used user name or email",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SimpleMessage"
            }
          }
        }
      },
      "ServerMistake": {
        "description": "500 Server Inner Mistake",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SimpleMessage"
            }
          }
        }
      }
    },
    "schemas": {
      "SimpleMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "user id"
          },
          "name": {
            "type": "string",
            "description": "user name"
          },
          "email": {
            "type": "string",
            "description": "user email"
          },
          "photo": {
            "type": "string",
            "description": "user profile photo url"
          }
        }
      },
      "Encrypted": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string"
          },
          "sign": {
            "type": "string",
            "description": "signature by client side"
          },
          "data": {
            "type": "string",
            "description": "encrypted data by client side"
          }
        }
      }
    },
    "securitySchemes": {
      "HttpOnlyCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "token"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "github_oauth": {
        "type": "oauth2",
        "description": "github oauth",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://github.com/login/oauth/authorize",
            "tokenUrl": "https://github.com/login/oauth/access_token",
            "scope": {
              "read": "Grants read access to public information",
              "write": "Grants write access to public information",
              "admin": "Grants read and write access to administrative information"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/auth/email/callback": {
      "get": {
        "description": "varify the token from email callback and if OK, update the user role",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "verify the token successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/SimpleMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/ConflictId"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/auth/email/resend": {
      "get": {
        "description": "resend the signup email request",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "verify the token successfully and resend the email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/SimpleMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/ConflictId"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/auth/githuboauth": {
      "get": {
        "description": "github oauth login",
        "paremeters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "description": "The code sent by Github which will be used for token fetch"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully login with the github oauth account",
            "headers": {
              "Set-cookie": {
                "schema": {
                  "type": "string",
                  "example": "sessionId=xxxxx; Max-Age=120000; Httponly; Secure; Samesite"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/auth": {
      "get": {
        "description": "authentication with httponly cookie token",
        "security": [
          {
            "HttpOnlyCookie": []
          }
        ],
        "parameteres": [
          {
            "in": "cookie",
            "name": "token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "confirm the login status"
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "log in with user info",
        "requestBody": {
          "description": "user information post for signup",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "secret": {
                    "type": "string"
                  },
                  "sign": {
                    "type": "string"
                  },
                  "data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfully login with email and password",
            "headers": {
              "Set-cookie": {
                "schema": {
                  "type": "string",
                  "example": "sessionId=xxxxx; Max-Age=120000; Httponly; Secure; Samesite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "403": {
            "$ref": "#/components/responses/InvalidPWD"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/auth/logout": {
      "get": {
        "description": "log out",
        "security": [
          {
            "HttpOnlyCookie": []
          }
        ],
        "parameteres": [
          {
            "in": "cookie",
            "name": "token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully log out",
            "headers": {
              "Set-cookie": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/SimpleMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "description": "user sign up with name, email and pwd",
        "requestBody": {
          "description": "user information post for signup",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#components/schemas/Encrypted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "sign up successfully and afterwards send a email for confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/SimpleMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/ConflictId"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/load/{name}": {
      "get": {
        "description": "get file by name",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully get file",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/users/{userId}": {
      "get": {
        "description": "get user info details by id",
        "security": [
          {
            "HttpOnlyCookie": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully get user information"
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          }
        }
      },
      "put": {
        "description": "update the user info of own such as name, email or pwd",
        "security": [
          {
            "HttpOnlyCookie": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "user information preparing for updating",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#components/schemas/Encrypted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfully updated the user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/SimpleMessage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/ConflictId"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      },
      "delete": {
        "description": "cancel own account",
        "security": [
          {
            "HttpOnlyCookie": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully delete the account",
            "headers": {
              "Set-cookie": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/SimpleMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "description": "get all user info of users signed up here by admin",
        "security": [
          {
            "HttpOnlyCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "successfully get user list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/FailedAuth"
          },
          "500": {
            "$ref": "#/components/responses/ServerMistake"
          }
        }
      },
      "delete": {
        "description": "delete a list of users by admin",
        "security": [
          {
            "HttpOnlyCookie": []
          }
        ]
      }
    }
  },
  "tags": []
}